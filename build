#!/usr/bin/env python
import logging
import os
import re
import shutil
import subprocess

logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger(__name__)
PWD = os.getcwd()
destination = os.path.join(PWD, 'dist')
product = os.path.join(PWD, 'dist.crx')
__scripts = None


def gather():
    content_list = ('manifest.json', 'images', 'pages', 'styles', 'scripts', )
    gatherers = lambda i: shutil.copytree if os.path.isdir(i) else shutil.copy
    if os.path.isdir(destination):
        shutil.rmtree(destination)
    if os.path.isfile(product):
        os.remove(product)
    os.mkdir(destination)
    for item in content_list:
        item_path = os.path.join(PWD, item)
        if os.path.isfile(item_path):
            shutil.copy(item_path, destination)
        elif os.path.isdir(item_path):
            shutil.copytree(item_path, os.path.join(destination, item))


def get_minified_version(src, default=None):
    '''Check if a minified version of js file exists'''
    global __scripts
    scripts_dir = os.path.join(destination, 'scripts')
    if __scripts is None:
        __scripts = {}
        for i in os.listdir(scripts_dir):
            minified_version = list(os.path.splitext(i))
            minified_version.insert(1, '.min')
            minified_version = ''.join(minified_version)
            if os.path.isfile(os.path.join(scripts_dir, minified_version)):
                __scripts.update({
                    'scripts/{}'.format(i): '/scripts/{}'.format(
                        minified_version
                    )
                })
    return __scripts.get(src, default)


def replace():
    pages_dir = os.path.join(destination, 'pages')
    src_exp = re.compile('src=\"(.+)\"')
    replaced_scripts = []
    for item in os.listdir(pages_dir):
        item_path = os.path.join(pages_dir, item)
        with open(item_path) as rf:
            lines = []
            modified = False
            for line in rf:
                src = None
                content = line.strip()
                if content.startswith('<script') and 'src="' in content:
                    srcs = src_exp.findall(content)
                    if len(srcs) == 1:
                        src = srcs[0]
                if src:
                    s = src[1:] if src.startswith('/') else src
                    minified_src = get_minified_version(s)
                    if minified_src is not None:
                        replaced_scripts.append(src)
                        content = content.replace(src, minified_src)
                        log.info('Script src replaced: %s => %s', src, minified_src)
                        modified = True
                lines.append(content)
            if modified:
                with open(item_path, 'w') as wf:
                    wf.write('\n'.join(lines))
                    log.info('File %s replaced', item_path)
    return replaced_scripts


def cleanup(l):
    for src in l:
        s = src[1:] if src.startswith('/') else src
        s = s.replace('/', os.sep)
        s_path = os.path.join(destination, s)
        if os.path.isfile(s_path):
            os.remove(s_path)
            log.info('Deleted %s', s_path)


def build():
    private_key = os.path.join(PWD, 'Cr24.pem')
    final_product = os.path.join(PWD, 'Cr24.crx')
    if not os.path.isfile(private_key):
        subprocess.check_output(['./crxmake.sh', destination, ])
    else:
        subprocess.check_output(['./crxmake.sh', destination, private_key, ])
    if os.path.isfile(product):
        shutil.move(product, final_product)
        log.info('Built: %s', final_product)


if __name__ == '__main__':
    gather()
    cleanup(replace())
    build()
